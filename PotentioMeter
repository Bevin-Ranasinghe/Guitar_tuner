#define F_CPU 16000000UL

#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include <compat/twi.h>

// Hardware Configuration
#define LCD_ADDR        0x3E
#define BUZZER_PIN      PB1
#define POTENTIOMETER   0
#define PWM_TOP         1000  // Sets ~16kHz frequency

// LCD Commands
#define LCD_CMD         0x80
#define LCD_DATA        0x40
#define LCD_CLEAR       0x01
#define LCD_LINE1       0x80
#define LCD_LINE2       0xC0

// ================= I2C Interface =================
void I2C_Init(void) {
	TWSR0 = 0x00;            // No prescaler
	TWBR0 = 0x48;            // Set bit rate
	TWCR0 = (1 << TWEN);     // Enable TWI
}

void I2C_Start(void) {
	TWCR0 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
	while (!(TWCR0 & (1 << TWINT)));
}

void I2C_Stop(void) {
	TWCR0 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
}

void I2C_Write(uint8_t data) {
	TWDR0 = data;
	TWCR0 = (1 << TWINT) | (1 << TWEN);
	while (!(TWCR0 & (1 << TWINT)));
}

// ================= LCD Functions =================
void LCD_Send(uint8_t mode, uint8_t value) {
	I2C_Start();
	I2C_Write(LCD_ADDR << 1);
	I2C_Write(mode);
	I2C_Write(value);
	I2C_Stop();
	_delay_us(100);
}

void LCD_Command(uint8_t cmd) {
	LCD_Send(LCD_CMD, cmd);
}

void LCD_Data(uint8_t data) {
	LCD_Send(LCD_DATA, data);
}

void LCD_Init(void) {
	_delay_ms(50);  // Power-on delay
	
	// Initialization sequence
	const uint8_t init_sequence[] = {
		0x38, 0x39, 0x14, 0x78,
		0x5E, 0x6D, 0x0C, LCD_CLEAR
	};
	
	for (uint8_t i = 0; i < sizeof(init_sequence); i++) {
		LCD_Command(init_sequence[i]);
	}
	_delay_ms(2);
}

void LCD_Print(const char *str) {
	while (*str) {
		LCD_Data(*str++);
	}
}

// ================= ADC Functions =================
void ADC_Init(void) {
	ADMUX = (1 << REFS0);   // AVcc reference
	ADCSRA = (1 << ADEN) | (7 << ADPS0); // Enable ADC, prescaler 128
}

uint16_t ADC_Read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
	ADCSRA |= (1 << ADSC);
	while (ADCSRA & (1 << ADSC));
	return ADC;
}

// ================= Buzzer PWM =================
void Buzzer_Init(void) {
	DDRB |= (1 << BUZZER_PIN);  // Set as output

	// Fast PWM mode 14 (TOP in ICR1), non-inverting
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
	
	ICR1 = PWM_TOP;  // Set frequency
}

void Buzzer_SetVolume(uint16_t volume) {
	OCR1A = (volume * PWM_TOP) / 1023;  // Scale ADC value to PWM range
}

// ================= Main Program =================
int main(void) {
	// Initialize peripherals
	I2C_Init();
	LCD_Init();
	ADC_Init();
	Buzzer_Init();

	// Display static content
	LCD_Command(LCD_LINE1);
	LCD_Print("Volume Control:");
	LCD_Command(LCD_LINE2);
	LCD_Print("ADC: ");

	char buffer[8];
	uint16_t adc_value;

	while (1) {
		adc_value = ADC_Read(POTENTIOMETER);

		// Update ADC display
		LCD_Command(LCD_LINE2 + 5);
		itoa(adc_value, buffer, 10);
		LCD_Print(buffer);
		LCD_Print("   ");  // Clear any leftover digits

		// Control buzzer volume
		Buzzer_SetVolume(adc_value);

		_delay_ms(100);
	}
}
